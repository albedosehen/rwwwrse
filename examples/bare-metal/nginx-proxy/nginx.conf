# NGINX Configuration for rwwwrse Reverse Proxy Chaining
# This configuration sets up NGINX as a front-end proxy to rwwwrse
# Provides SSL termination, caching, rate limiting, and security features

# Main context
user nginx;
worker_processes auto;
worker_cpu_affinity auto;
worker_rlimit_nofile 65535;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

# Load dynamic modules
load_module modules/ngx_http_geoip_module.so;
load_module modules/ngx_http_realip_module.so;

events {
    worker_connections 4096;
    use epoll;
    multi_accept on;
    accept_mutex off;
}

http {
    # Basic settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Character encoding
    charset utf-8;
    
    # Logging format
    log_format main_ext '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for" '
                        '"$host" sn="$server_name" '
                        'rt=$request_time '
                        'ua="$upstream_addr" us="$upstream_status" '
                        'ut="$upstream_response_time" ul="$upstream_response_length" '
                        'cs=$upstream_cache_status';
    
    # JSON logging format for structured logging
    log_format json_combined escape=json
        '{'
        '"time_local":"$time_local",'
        '"remote_addr":"$remote_addr",'
        '"remote_user":"$remote_user",'
        '"request":"$request",'
        '"status": "$status",'
        '"body_bytes_sent":"$body_bytes_sent",'
        '"request_time":"$request_time",'
        '"http_referrer":"$http_referer",'
        '"http_user_agent":"$http_user_agent",'
        '"http_x_forwarded_for":"$http_x_forwarded_for",'
        '"http_host":"$http_host",'
        '"server_name":"$server_name",'
        '"upstream_addr":"$upstream_addr",'
        '"upstream_status":"$upstream_status",'
        '"upstream_response_time":"$upstream_response_time",'
        '"upstream_cache_status":"$upstream_cache_status"'
        '}';
    
    access_log /var/log/nginx/access.log json_combined;
    
    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 100;
    types_hash_max_size 2048;
    server_tokens off;
    
    # Buffer settings
    client_body_buffer_size 128k;
    client_max_body_size 10m;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    output_buffers 1 32k;
    postpone_output 1460;
    
    # Timeout settings
    client_body_timeout 12;
    client_header_timeout 12;
    send_timeout 10;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/json
        application/javascript
        application/xml+rss
        application/atom+xml
        image/svg+xml;
    
    # Rate limiting zones
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=general:10m rate=5r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
    
    # Connection limiting
    limit_conn_zone $binary_remote_addr zone=perip:10m;
    limit_conn_zone $server_name zone=perserver:10m;
    
    # SSL configuration
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;
    ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_session_tickets off;
    ssl_stapling on;
    ssl_stapling_verify on;
    
    # Security headers
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'; img-src 'self' data: https:; font-src 'self' data:;" always;
    
    # Hide server information
    more_clear_headers Server;
    more_set_headers 'Server: rwwwrse-nginx';
    
    # Upstream configuration for rwwwrse
    upstream rwwwrse_backend {
        # Multiple rwwwrse instances for high availability
        server 127.0.0.1:8080 max_fails=3 fail_timeout=30s weight=1;
        server 127.0.0.1:8081 max_fails=3 fail_timeout=30s weight=1 backup;
        
        # Connection pooling
        keepalive 32;
        keepalive_requests 100;
        keepalive_timeout 60s;
    }
    
    # Cache configuration
    proxy_cache_path /var/cache/nginx/rwwwrse levels=1:2 keys_zone=rwwwrse_cache:10m inactive=60m max_size=1g;
    proxy_temp_path /var/cache/nginx/temp;
    
    # Map for security
    map $http_user_agent $blocked_agent {
        default 0;
        ~*malicious 1;
        ~*bot 1;
        ~*spider 1;
        ~*crawler 1;
        ~*scanner 1;
    }
    
    # Map for real IP
    map $http_x_forwarded_for $real_ip {
        ~^([^,]+) $1;
        default $remote_addr;
    }
    
    # Default server (catch-all)
    server {
        listen 80 default_server;
        listen [::]:80 default_server;
        server_name _;
        
        # Security headers for default server
        add_header X-Robots-Tag "noindex, nofollow, nosnippet, noarchive" always;
        
        # Return 444 (close connection) for unknown hosts
        return 444;
    }
    
    # HTTP to HTTPS redirect server
    server {
        listen 80;
        listen [::]:80;
        server_name api.example.com app.example.com web.example.com admin.example.com;
        
        # Let's Encrypt ACME challenge
        location /.well-known/acme-challenge/ {
            root /var/www/letsencrypt;
            try_files $uri =404;
        }
        
        # Redirect all other traffic to HTTPS
        location / {
            return 301 https://$server_name$request_uri;
        }
    }
    
    # Main HTTPS server for API
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name api.example.com;
        
        # SSL certificate configuration
        ssl_certificate /etc/letsencrypt/live/api.example.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/api.example.com/privkey.pem;
        ssl_trusted_certificate /etc/letsencrypt/live/api.example.com/chain.pem;
        
        # Rate limiting
        limit_req zone=api burst=20 nodelay;
        limit_conn perip 10;
        limit_conn perserver 100;
        
        # Security
        if ($blocked_agent) {
            return 403;
        }
        
        # Proxy configuration
        location / {
            # Basic proxy settings
            proxy_pass http://rwwwrse_backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-Port $server_port;
            
            # Timeout settings
            proxy_connect_timeout 30s;
            proxy_send_timeout 60s;
            proxy_read_timeout 60s;
            
            # Buffer settings
            proxy_buffering on;
            proxy_buffer_size 4k;
            proxy_buffers 8 4k;
            proxy_busy_buffers_size 8k;
            
            # Caching (disabled for API)
            proxy_cache off;
            proxy_no_cache 1;
            proxy_cache_bypass 1;
            
            # Headers for backend
            proxy_set_header X-Request-ID $request_id;
            proxy_set_header X-Request-Start $msec;
        }
        
        # Health check endpoint (cached)
        location /health {
            proxy_pass http://rwwwrse_backend;
            proxy_cache rwwwrse_cache;
            proxy_cache_valid 200 30s;
            proxy_cache_key "$scheme$request_method$host$request_uri";
            
            # Basic proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # Metrics endpoint (internal only)
        location /metrics {
            allow 127.0.0.1;
            allow 10.0.0.0/8;
            allow 172.16.0.0/12;
            allow 192.168.0.0/16;
            deny all;
            
            proxy_pass http://rwwwrse_backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
    }
    
    # Frontend application server
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name app.example.com;
        
        # SSL certificate
        ssl_certificate /etc/letsencrypt/live/app.example.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/app.example.com/privkey.pem;
        ssl_trusted_certificate /etc/letsencrypt/live/app.example.com/chain.pem;
        
        # Rate limiting (more lenient for frontend)
        limit_req zone=general burst=50 nodelay;
        limit_conn perip 20;
        
        # Static file serving with aggressive caching
        location ~* \.(css|js|jpg|jpeg|png|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary "Accept-Encoding";
            
            # Try local files first, then proxy
            root /var/www/app.example.com;
            try_files $uri @proxy;
        }
        
        # Main application proxy
        location @proxy {
            proxy_pass http://rwwwrse_backend;
            proxy_cache rwwwrse_cache;
            proxy_cache_valid 200 5m;
            proxy_cache_valid 404 1m;
            proxy_cache_key "$scheme$request_method$host$request_uri$is_args$args";
            
            # Standard proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            
            # Cache headers
            add_header X-Cache-Status $upstream_cache_status;
        }
        
        # Default location
        location / {
            try_files $uri @proxy;
        }
    }
    
    # Web service server
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name web.example.com;
        
        # SSL certificate
        ssl_certificate /etc/letsencrypt/live/web.example.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/web.example.com/privkey.pem;
        ssl_trusted_certificate /etc/letsencrypt/live/web.example.com/chain.pem;
        
        # Standard rate limiting
        limit_req zone=general burst=30 nodelay;
        limit_conn perip 15;
        
        location / {
            proxy_pass http://rwwwrse_backend;
            proxy_cache rwwwrse_cache;
            proxy_cache_valid 200 10m;
            proxy_cache_key "$scheme$request_method$host$request_uri$is_args$args";
            
            # Standard proxy configuration
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            
            # Performance headers
            add_header X-Cache-Status $upstream_cache_status;
        }
    }
    
    # Admin interface (with additional security)
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name admin.example.com;
        
        # SSL certificate
        ssl_certificate /etc/letsencrypt/live/admin.example.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/admin.example.com/privkey.pem;
        ssl_trusted_certificate /etc/letsencrypt/live/admin.example.com/chain.pem;
        
        # Strict rate limiting for admin
        limit_req zone=login burst=5 nodelay;
        limit_conn perip 5;
        
        # IP whitelisting (uncomment and configure as needed)
        # allow 203.0.113.0/24;
        # allow 198.51.100.0/24;
        # deny all;
        
        # Additional security headers for admin
        add_header X-Frame-Options "DENY" always;
        add_header Content-Security-Policy "default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline';" always;
        
        location / {
            proxy_pass http://rwwwrse_backend;
            
            # No caching for admin interface
            proxy_cache off;
            proxy_no_cache 1;
            proxy_cache_bypass 1;
            
            # Standard proxy headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Request-ID $request_id;
            
            # Increase timeouts for admin operations
            proxy_connect_timeout 60s;
            proxy_send_timeout 120s;
            proxy_read_timeout 120s;
        }
    }
    
    # NGINX status page (internal monitoring)
    server {
        listen 127.0.0.1:8888;
        server_name localhost;
        
        location /nginx_status {
            stub_status on;
            access_log off;
            allow 127.0.0.1;
            deny all;
        }
        
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
    }
}