# NGINX Ingress Controller Namespace Configuration for rwwwrse
# This file creates a dedicated namespace and resources for rwwwrse with NGINX Ingress integration

apiVersion: v1
kind: Namespace
metadata:
  name: rwwwrse
  labels:
    # Standard Kubernetes labels
    app.kubernetes.io/name: rwwwrse
    app.kubernetes.io/instance: rwwwrse-nginx-ingress
    app.kubernetes.io/version: "1.0.0"
    app.kubernetes.io/component: reverse-proxy
    app.kubernetes.io/part-of: rwwwrse-platform
    app.kubernetes.io/managed-by: kubectl
    
    # NGINX Ingress specific labels
    ingress.kubernetes.io/controller: nginx
    ingress.kubernetes.io/class: nginx
    
    # Environment and deployment labels
    environment: production
    platform: kubernetes
    deployment-method: nginx-ingress
    
    # Monitoring and observability labels
    monitoring.enabled: "true"
    logging.enabled: "true"
    
    # Security labels
    security.pod-security-standard: "restricted"
    network-policy.enabled: "true"
    
  annotations:
    # NGINX Ingress Controller integration
    nginx.ingress.kubernetes.io/configuration-snippet: |
      more_set_headers "X-Forwarded-Proto $scheme";
      more_set_headers "X-Real-IP $remote_addr";
      more_set_headers "X-Forwarded-For $proxy_add_x_forwarded_for";
    
    # Description and documentation
    kubernetes.io/description: "rwwwrse reverse proxy server with NGINX Ingress Controller"
    deployment.kubernetes.io/documentation: "https://github.com/your-org/rwwwrse/tree/main/examples/kubernetes/ingress/nginx"
    
    # Resource management
    resources.kubernetes.io/auto-scaling: "enabled"
    resources.kubernetes.io/cost-optimization: "enabled"
    
    # Network policies and security
    network.kubernetes.io/policy-enabled: "true"
    security.kubernetes.io/pod-security-standard: "restricted"
    
    # SSL/TLS management
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    ingress.kubernetes.io/ssl-redirect: "true"
    
    # Creation timestamp for tracking
    created-by: "rwwwrse-nginx-ingress-deployment"
    
---
# Network Policy for NGINX Ingress Integration
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: rwwwrse-nginx-network-policy
  namespace: rwwwrse
  labels:
    app: rwwwrse
    component: network-policy
    ingress-controller: nginx
  annotations:
    network.kubernetes.io/policy-type: "ingress-egress"
    nginx.ingress.kubernetes.io/description: "Network policy for rwwwrse with NGINX ingress"
spec:
  podSelector:
    matchLabels:
      app: rwwwrse
  policyTypes:
  - Ingress
  - Egress
  
  # Ingress rules - Allow traffic from NGINX Ingress Controller
  ingress:
  # Allow traffic from NGINX Ingress Controller namespace
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    - namespaceSelector:
        matchLabels:
          app.kubernetes.io/name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 8443
  
  # Allow traffic from within the same namespace
  - from:
    - namespaceSelector:
        matchLabels:
          name: rwwwrse
    - podSelector:
        matchLabels:
          app: rwwwrse
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 8443
  
  # Allow health checks from anywhere (needed for load balancer health probes)
  - from: []
    ports:
    - protocol: TCP
      port: 8080
      # Health check endpoint
  
  # Egress rules - Allow necessary outbound traffic
  egress:
  # Allow DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  
  # Allow HTTPS for certificate management and external APIs
  - to: []
    ports:
    - protocol: TCP
      port: 443
  
  # Allow HTTP for internal services and Let's Encrypt challenges
  - to: []
    ports:
    - protocol: TCP
      port: 80
  
  # Allow communication within namespace
  - to:
    - namespaceSelector:
        matchLabels:
          name: rwwwrse
  
  # Allow communication to backend services in default namespace
  - to:
    - namespaceSelector:
        matchLabels:
          name: default
    ports:
    - protocol: TCP
      port: 3000
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9000

---
# Resource Quota for the rwwwrse namespace
apiVersion: v1
kind: ResourceQuota
metadata:
  name: rwwwrse-nginx-resource-quota
  namespace: rwwwrse
  labels:
    app: rwwwrse
    component: resource-quota
    ingress-controller: nginx
  annotations:
    resource.kubernetes.io/description: "Resource quota for rwwwrse with NGINX ingress"
spec:
  hard:
    # Compute resources
    requests.cpu: "2"
    requests.memory: 4Gi
    limits.cpu: "4"
    limits.memory: 8Gi
    
    # Storage resources
    requests.storage: 50Gi
    persistentvolumeclaims: "5"
    
    # Object counts
    pods: "20"
    services: "5"
    configmaps: "10"
    secrets: "10"
    ingresses.networking.k8s.io: "5"
    
    # Service types (LoadBalancer not needed with ingress)
    services.loadbalancer: "0"
    services.nodeport: "2"
    
---
# Limit Range to set default resource limits
apiVersion: v1
kind: LimitRange
metadata:
  name: rwwwrse-nginx-limit-range
  namespace: rwwwrse
  labels:
    app: rwwwrse
    component: limit-range
    ingress-controller: nginx
  annotations:
    resource.kubernetes.io/description: "Default resource limits for rwwwrse with NGINX ingress"
spec:
  limits:
  # Default limits for containers
  - default:
      cpu: 500m
      memory: 512Mi
    defaultRequest:
      cpu: 100m
      memory: 128Mi
    type: Container
  
  # Limits for pods
  - max:
      cpu: "1"
      memory: 2Gi
    min:
      cpu: 50m
      memory: 64Mi
    type: Pod
  
  # Limits for persistent volume claims
  - max:
      storage: 20Gi
    min:
      storage: 1Gi
    type: PersistentVolumeClaim

---
# Service Account for rwwwrse with NGINX Ingress
apiVersion: v1
kind: ServiceAccount
metadata:
  name: rwwwrse-nginx-sa
  namespace: rwwwrse
  labels:
    app: rwwwrse
    component: service-account
    ingress-controller: nginx
  annotations:
    nginx.ingress.kubernetes.io/service-account: "rwwwrse-nginx-sa"
automountServiceAccountToken: true

---
# RBAC Role for rwwwrse service account
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: rwwwrse-nginx-role
  namespace: rwwwrse
  labels:
    app: rwwwrse
    component: rbac
    ingress-controller: nginx
rules:
# Allow reading configmaps and secrets
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
# Allow reading services and endpoints
- apiGroups: [""]
  resources: ["services", "endpoints"]
  verbs: ["get", "list", "watch"]
# Allow reading ingresses
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch"]

---
# RBAC Role Binding
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: rwwwrse-nginx-role-binding
  namespace: rwwwrse
  labels:
    app: rwwwrse
    component: rbac
    ingress-controller: nginx
subjects:
- kind: ServiceAccount
  name: rwwwrse-nginx-sa
  namespace: rwwwrse
roleRef:
  kind: Role
  name: rwwwrse-nginx-role
  apiGroup: rbac.authorization.k8s.io