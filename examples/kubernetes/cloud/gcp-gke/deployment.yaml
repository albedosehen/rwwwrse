# rwwwrse Deployment for Google Kubernetes Engine (GKE)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: rwwwrse
  namespace: rwwwrse
  labels:
    app: rwwwrse
    component: proxy
    version: latest
  annotations:
    deployment.kubernetes.io/revision: "1"
    cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 2
  selector:
    matchLabels:
      app: rwwwrse
  template:
    metadata:
      labels:
        app: rwwwrse
        component: proxy
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "9090"
        prometheus.io/path: "/metrics"
        cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
    spec:
      serviceAccountName: rwwwrse-ksa
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: rwwwrse
        image: gcr.io/PROJECT_ID/rwwwrse:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8080
          name: http
          protocol: TCP
        - containerPort: 9090
          name: metrics
          protocol: TCP
        env:
        - name: RWWWRSE_LOG_LEVEL
          value: "info"
        - name: RWWWRSE_LOG_FORMAT
          value: "json"
        - name: RWWWRSE_METRICS_ENABLED
          value: "true"
        - name: RWWWRSE_METRICS_PORT
          value: "9090"
        - name: RWWWRSE_TLS_AUTO
          value: "true"
        - name: RWWWRSE_TLS_EMAIL
          valueFrom:
            secretKeyRef:
              name: rwwwrse-secrets
              key: tls-email
        - name: RWWWRSE_RATE_LIMIT
          value: "1000"
        - name: RWWWRSE_TIMEOUT
          value: "30s"
        - name: RWWWRSE_CONFIG_FILE
          value: "/etc/rwwwrse/routes.yaml"
        - name: GOOGLE_CLOUD_PROJECT
          value: "PROJECT_ID"
        - name: GKE_CLUSTER_NAME
          value: "rwwwrse-cluster"
        - name: GKE_CLUSTER_LOCATION
          value: "us-central1"
        volumeMounts:
        - name: config-volume
          mountPath: /etc/rwwwrse
          readOnly: true
        - name: tls-volume
          mountPath: /etc/tls
          readOnly: true
        - name: tmp-volume
          mountPath: /tmp
        resources:
          requests:
            cpu: 200m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 30
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
          timeoutSeconds: 3
          failureThreshold: 2
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config-volume
        configMap:
          name: rwwwrse-config
          items:
          - key: routes.yaml
            path: routes.yaml
      - name: tls-volume
        secret:
          secretName: rwwwrse-tls
          optional: true
      - name: tmp-volume
        emptyDir: {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - rwwwrse
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: cloud.google.com/gke-nodepool
                operator: In
                values:
                - rwwwrse-pool
      tolerations:
      - key: "rwwwrse-dedicated"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      terminationGracePeriodSeconds: 30

---
# rwwwrse Service (LoadBalancer with Google Cloud Load Balancer)
apiVersion: v1
kind: Service
metadata:
  name: rwwwrse
  namespace: rwwwrse
  labels:
    app: rwwwrse
    component: proxy
  annotations:
    cloud.google.com/load-balancer-type: "External"
    cloud.google.com/backend-config: '{"default": "rwwwrse-backend-config"}'
    cloud.google.com/neg: '{"ingress": true}'
    networking.gke.io/load-balancer-type: "External"
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  type: LoadBalancer
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 10800
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  - port: 443
    targetPort: 8080
    protocol: TCP
    name: https
  selector:
    app: rwwwrse

---
# Internal Service for metrics
apiVersion: v1
kind: Service
metadata:
  name: rwwwrse-metrics
  namespace: rwwwrse
  labels:
    app: rwwwrse
    component: metrics
spec:
  type: ClusterIP
  ports:
  - port: 9090
    targetPort: 9090
    protocol: TCP
    name: metrics
  selector:
    app: rwwwrse

---
# HorizontalPodAutoscaler for GKE
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: rwwwrse-hpa
  namespace: rwwwrse
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: rwwwrse
  minReplicas: 3
  maxReplicas: 100
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60

---
# VerticalPodAutoscaler (GKE-specific)
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: rwwwrse-vpa
  namespace: rwwwrse
spec:
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: rwwwrse
  updatePolicy:
    updateMode: "Auto"
  resourcePolicy:
    containerPolicies:
    - containerName: rwwwrse
      maxAllowed:
        cpu: 2
        memory: 4Gi
      minAllowed:
        cpu: 100m
        memory: 128Mi

---
# PodDisruptionBudget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: rwwwrse-pdb
  namespace: rwwwrse
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: rwwwrse

---
# Kubernetes Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: rwwwrse-ksa
  namespace: rwwwrse
  annotations:
    iam.gke.io/gcp-service-account: rwwwrse-sa@PROJECT_ID.iam.gserviceaccount.com
automountServiceAccountToken: true

---
# ClusterRole for service discovery
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: rwwwrse-cluster-role
rules:
- apiGroups: [""]
  resources: ["services", "endpoints", "pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses", "networkpolicies"]
  verbs: ["get", "list", "watch"]

---
# ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: rwwwrse-cluster-role-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: rwwwrse-cluster-role
subjects:
- kind: ServiceAccount
  name: rwwwrse-ksa
  namespace: rwwwrse

---
# BackendConfig for Google Cloud Load Balancer
apiVersion: cloud.google.com/v1
kind: BackendConfig
metadata:
  name: rwwwrse-backend-config
  namespace: rwwwrse
spec:
  healthCheck:
    checkIntervalSec: 30
    timeoutSec: 10
    healthyThreshold: 2
    unhealthyThreshold: 3
    type: HTTP
    requestPath: /health
    port: 8080
  sessionAffinity:
    affinityType: "CLIENT_IP"
    affinityCookieTtlSec: 3600
  timeoutSec: 30
  connectionDraining:
    drainingTimeoutSec: 60
  logging:
    enable: true
    sampleRate: 1.0
  cdn:
    enabled: false
    cachePolicy:
      includeHost: true
      includeProtocol: true
      includeQueryString: false

---
# Sample Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sample-app
  namespace: rwwwrse
  labels:
    app: sample-app
    component: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: sample-app
  template:
    metadata:
      labels:
        app: sample-app
        component: backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      containers:
      - name: app
        image: nginx:alpine
        ports:
        - containerPort: 8080
          name: http
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 65534
          capabilities:
            drop:
            - ALL

---
# Sample Application Service
apiVersion: v1
kind: Service
metadata:
  name: sample-app
  namespace: rwwwrse
  labels:
    app: sample-app
  annotations:
    cloud.google.com/neg: '{"ingress": true}'
spec:
  type: ClusterIP
  ports:
  - port: 8080
    targetPort: 8080
    protocol: TCP
    name: http
  selector:
    app: sample-app

---
# Sample Application HPA
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: sample-app-hpa
  namespace: rwwwrse
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: sample-app
  minReplicas: 2
  maxReplicas: 50
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70