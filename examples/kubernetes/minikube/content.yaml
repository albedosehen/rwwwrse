# Content ConfigMaps for sample applications
apiVersion: v1
kind: ConfigMap
metadata:
  name: sample-app1-content
  namespace: rwwwrse
  labels:
    app: sample-app1
    component: content
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Sample App 1 - rwwwrse on Kubernetes</title>
        <style>
            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                max-width: 800px;
                margin: 0 auto;
                padding: 20px;
                line-height: 1.6;
                color: #333;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                min-height: 100vh;
            }
            .container {
                background: white;
                border-radius: 10px;
                padding: 30px;
                box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            }
            .header {
                text-align: center;
                padding: 20px 0;
                border-bottom: 2px solid #667eea;
                margin-bottom: 30px;
            }
            .status {
                background: #f0f8f0;
                border-left: 4px solid #28a745;
                padding: 15px;
                margin: 20px 0;
                border-radius: 5px;
            }
            .info-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 20px;
                margin: 20px 0;
            }
            .info-card {
                background: #f8f9fa;
                padding: 15px;
                border-radius: 8px;
                border: 1px solid #e9ecef;
            }
            .navbar {
                background: #343a40;
                padding: 10px 0;
                margin: 20px -30px;
                border-radius: 5px;
            }
            .navbar a {
                color: white;
                text-decoration: none;
                padding: 10px 15px;
                margin: 0 5px;
                border-radius: 3px;
                display: inline-block;
            }
            .navbar a:hover {
                background: #495057;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üöÄ Sample Application 1</h1>
                <p>Running on Kubernetes via rwwwrse reverse proxy</p>
            </div>
            
            <div class="status">
                <h3>‚úÖ Application Status: Running</h3>
                <p>This is Sample App 1 served through rwwwrse on Kubernetes (Minikube).</p>
            </div>
            
            <div class="info-grid">
                <div class="info-card">
                    <h4>üèóÔ∏è Platform</h4>
                    <p>Kubernetes (Minikube)</p>
                </div>
                <div class="info-card">
                    <h4>üîÑ Proxy</h4>
                    <p>rwwwrse</p>
                </div>
                <div class="info-card">
                    <h4>üåê Server</h4>
                    <p>nginx (Alpine)</p>
                </div>
                <div class="info-card">
                    <h4>üéØ Environment</h4>
                    <p>Development</p>
                </div>
            </div>
            
            <div class="navbar">
                <a href="http://app1.minikube.local">App 1 (Current)</a>
                <a href="http://app2.minikube.local">App 2</a>
                <a href="http://api.minikube.local/api">API</a>
                <a href="http://static.minikube.local">Static</a>
            </div>
            
            <h2>üìä Application Features</h2>
            <ul>
                <li>Kubernetes pod deployment</li>
                <li>Service discovery</li>
                <li>Health checks</li>
                <li>Resource limits</li>
                <li>Rolling updates</li>
                <li>Prometheus metrics</li>
            </ul>
            
            <h2>üîß Technical Details</h2>
            <ul>
                <li><strong>Namespace:</strong> rwwwrse</li>
                <li><strong>Service:</strong> sample-app1</li>
                <li><strong>Port:</strong> 8080</li>
                <li><strong>Health Check:</strong> /health</li>
                <li><strong>Metrics:</strong> Prometheus annotations</li>
            </ul>
            
            <script>
                // Add dynamic content
                document.addEventListener('DOMContentLoaded', function() {
                    const timestamp = new Date().toISOString();
                    const statusDiv = document.querySelector('.status');
                    statusDiv.innerHTML += `<p><small>Page loaded: ${timestamp}</small></p>`;
                    
                    // Add hostname if available
                    if (window.location.hostname) {
                        statusDiv.innerHTML += `<p><small>Hostname: ${window.location.hostname}</small></p>`;
                    }
                });
            </script>
        </div>
    </body>
    </html>

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: sample-app2-content
  namespace: rwwwrse
  labels:
    app: sample-app2
    component: content
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Sample App 2 - rwwwrse on Kubernetes</title>
        <style>
            body {
                font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                max-width: 800px;
                margin: 0 auto;
                padding: 20px;
                line-height: 1.6;
                color: #333;
                background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
                min-height: 100vh;
            }
            .container {
                background: white;
                border-radius: 10px;
                padding: 30px;
                box-shadow: 0 10px 30px rgba(0,0,0,0.1);
            }
            .header {
                text-align: center;
                padding: 20px 0;
                border-bottom: 2px solid #f5576c;
                margin-bottom: 30px;
            }
            .status {
                background: #fff5f5;
                border-left: 4px solid #f5576c;
                padding: 15px;
                margin: 20px 0;
                border-radius: 5px;
            }
            .info-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                gap: 20px;
                margin: 20px 0;
            }
            .info-card {
                background: #f8f9fa;
                padding: 15px;
                border-radius: 8px;
                border: 1px solid #e9ecef;
            }
            .navbar {
                background: #343a40;
                padding: 10px 0;
                margin: 20px -30px;
                border-radius: 5px;
            }
            .navbar a {
                color: white;
                text-decoration: none;
                padding: 10px 15px;
                margin: 0 5px;
                border-radius: 3px;
                display: inline-block;
            }
            .navbar a:hover {
                background: #495057;
            }
            .feature-list {
                background: #fff0f6;
                padding: 20px;
                border-radius: 8px;
                margin: 20px 0;
            }
        </style>
    </head>
    <body>
        <div class="container">
            <div class="header">
                <h1>üé® Sample Application 2</h1>
                <p>Alternative service running on Kubernetes via rwwwrse</p>
            </div>
            
            <div class="status">
                <h3>‚úÖ Application Status: Active</h3>
                <p>This is Sample App 2 demonstrating multi-service routing through rwwwrse.</p>
            </div>
            
            <div class="info-grid">
                <div class="info-card">
                    <h4>üèóÔ∏è Platform</h4>
                    <p>Kubernetes (Minikube)</p>
                </div>
                <div class="info-card">
                    <h4>üîÑ Proxy</h4>
                    <p>rwwwrse</p>
                </div>
                <div class="info-card">
                    <h4>üåê Server</h4>
                    <p>nginx (Alpine)</p>
                </div>
                <div class="info-card">
                    <h4>üéØ Environment</h4>
                    <p>Development</p>
                </div>
            </div>
            
            <div class="navbar">
                <a href="http://app1.minikube.local">App 1</a>
                <a href="http://app2.minikube.local">App 2 (Current)</a>
                <a href="http://api.minikube.local/api">API</a>
                <a href="http://static.minikube.local">Static</a>
            </div>
            
            <div class="feature-list">
                <h2>üåü Service Features</h2>
                <ul>
                    <li>Host-based routing configuration</li>
                    <li>Independent scaling and deployment</li>
                    <li>Health monitoring and checks</li>
                    <li>Resource isolation</li>
                    <li>Load balancing capabilities</li>
                    <li>Service mesh integration ready</li>
                </ul>
            </div>
            
            <h2>üîß Kubernetes Configuration</h2>
            <ul>
                <li><strong>Deployment:</strong> sample-app2</li>
                <li><strong>Service:</strong> sample-app2:8080</li>
                <li><strong>Replicas:</strong> 1 (configurable)</li>
                <li><strong>Resource Limits:</strong> 200m CPU, 256Mi RAM</li>
                <li><strong>Health Endpoint:</strong> /health</li>
                <li><strong>Readiness Probe:</strong> 3s initial, 10s period</li>
            </ul>
            
            <h2>üìà Monitoring</h2>
            <p>This service is configured for Prometheus monitoring with the following annotations:</p>
            <ul>
                <li><code>prometheus.io/scrape: "true"</code></li>
                <li><code>prometheus.io/port: "8080"</code></li>
                <li><code>prometheus.io/path: "/metrics"</code></li>
            </ul>
            
            <script>
                // Add dynamic content and status
                document.addEventListener('DOMContentLoaded', function() {
                    const timestamp = new Date().toISOString();
                    const statusDiv = document.querySelector('.status');
                    statusDiv.innerHTML += `<p><small>Last updated: ${timestamp}</small></p>`;
                    
                    // Simulate some basic metrics
                    const uptime = Math.floor(Math.random() * 86400); // Random uptime in seconds
                    const hours = Math.floor(uptime / 3600);
                    const minutes = Math.floor((uptime % 3600) / 60);
                    statusDiv.innerHTML += `<p><small>Simulated uptime: ${hours}h ${minutes}m</small></p>`;
                });
                
                // Simple health check simulation
                setInterval(() => {
                    const healthStatus = document.querySelector('.status h3');
                    const isHealthy = Math.random() > 0.1; // 90% healthy
                    healthStatus.textContent = isHealthy ? 
                        '‚úÖ Application Status: Active' : 
                        '‚ö†Ô∏è Application Status: Checking...';
                }, 30000);
            </script>
        </div>
    </body>
    </html>