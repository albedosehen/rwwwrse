# Environment Configuration for CD Pipeline
# This file defines environment-specific settings for deployments

environments:
  development:
    name: "Development"
    description: "Development environment for testing new features"
    type: "kubernetes"
    auto_deploy: true
    require_approval: false
    
    # Kubernetes configuration
    kubernetes:
      namespace: "rwwwrse-dev"
      kubeconfig_secret: "KUBECONFIG_DEV"
      replicas: 1
      resources:
        requests:
          cpu: "100m"
          memory: "128Mi"
        limits:
          cpu: "500m"
          memory: "512Mi"
    
    # Ingress configuration
    ingress:
      enabled: true
      host: "dev.rwwwrse.example.com"
      tls: false
      annotations:
        kubernetes.io/ingress.class: "nginx"
        nginx.ingress.kubernetes.io/rewrite-target: "/"
    
    # Health check configuration
    health_check:
      enabled: true
      timeout: 120
      retry_interval: 10
      endpoints:
        - "/health"
        - "/metrics"
    
    # Monitoring configuration
    monitoring:
      enabled: false
      prometheus: false
      grafana: false
    
    # Deployment strategy
    deployment:
      strategy: "rolling"
      max_unavailable: 1
      max_surge: 1

  staging:
    name: "Staging"
    description: "Staging environment for pre-production testing"
    type: "kubernetes"
    auto_deploy: true
    require_approval: true
    
    # Kubernetes configuration
    kubernetes:
      namespace: "rwwwrse-staging"
      kubeconfig_secret: "KUBECONFIG_STAGING"
      replicas: 2
      resources:
        requests:
          cpu: "200m"
          memory: "256Mi"
        limits:
          cpu: "1000m"
          memory: "1Gi"
    
    # Ingress configuration
    ingress:
      enabled: true
      host: "staging.rwwwrse.example.com"
      tls: true
      annotations:
        kubernetes.io/ingress.class: "nginx"
        nginx.ingress.kubernetes.io/rewrite-target: "/"
        cert-manager.io/cluster-issuer: "letsencrypt-prod"
    
    # Health check configuration
    health_check:
      enabled: true
      timeout: 180
      retry_interval: 10
      endpoints:
        - "/health"
        - "/metrics"
        - "/ready"
    
    # Monitoring configuration
    monitoring:
      enabled: true
      prometheus: true
      grafana: false
    
    # Deployment strategy
    deployment:
      strategy: "blue-green"
      max_unavailable: 0
      max_surge: 2
    
    # Testing configuration
    testing:
      smoke_tests: true
      integration_tests: true
      performance_tests: true
      security_scans: true

  production:
    name: "Production"
    description: "Production environment for live traffic"
    type: "kubernetes"
    auto_deploy: false
    require_approval: true
    
    # Kubernetes configuration
    kubernetes:
      namespace: "rwwwrse-prod"
      kubeconfig_secret: "KUBECONFIG_PROD"
      replicas: 3
      resources:
        requests:
          cpu: "500m"
          memory: "512Mi"
        limits:
          cpu: "2000m"
          memory: "2Gi"
    
    # Ingress configuration
    ingress:
      enabled: true
      host: "rwwwrse.example.com"
      tls: true
      annotations:
        kubernetes.io/ingress.class: "nginx"
        nginx.ingress.kubernetes.io/rewrite-target: "/"
        cert-manager.io/cluster-issuer: "letsencrypt-prod"
        nginx.ingress.kubernetes.io/rate-limit: "100"
    
    # Health check configuration
    health_check:
      enabled: true
      timeout: 300
      retry_interval: 15
      endpoints:
        - "/health"
        - "/metrics"
        - "/ready"
        - "/live"
    
    # Monitoring configuration
    monitoring:
      enabled: true
      prometheus: true
      grafana: true
      alertmanager: true
    
    # Deployment strategy
    deployment:
      strategy: "blue-green"
      max_unavailable: 0
      max_surge: 3
      canary_percentage: 10
    
    # Testing configuration
    testing:
      smoke_tests: true
      integration_tests: true
      performance_tests: true
      security_scans: true
      load_tests: true
    
    # Backup and recovery
    backup:
      enabled: true
      retention_days: 30
      schedule: "0 2 * * *"
    
    # Security configuration
    security:
      network_policies: true
      pod_security_policies: true
      rbac: true
      image_scanning: true

  synology:
    name: "Synology NAS"
    description: "Self-hosted environment on Synology NAS"
    type: "docker-compose"
    auto_deploy: true
    require_approval: false
    
    # Docker Compose configuration
    docker_compose:
      file: "docker-compose.deploy.yml"
      project_name: "rwwwrse"
      build_local: true
    
    # Host configuration
    host:
      runner: "self-hosted"
      labels: ["synology"]
      working_directory: "/volume1/docker/github-runner"
    
    # Health check configuration
    health_check:
      enabled: true
      timeout: 180
      retry_interval: 15
      endpoints:
        - "/health"
        - "/metrics"
      host: "localhost"
      port: 8080
    
    # Monitoring configuration
    monitoring:
      enabled: false
      prometheus: false
      grafana: false
    
    # Volume configuration
    volumes:
      certs: "./docker-data/certs"
      logs: "./docker-data/logs"
      data: "./docker-data/data"
    
    # Environment variables
    environment:
      LOG_LEVEL: "info"
      DEPLOYMENT_MODE: "production"
      TLS_AUTO_CERT: "false"

# Global deployment settings
global:
  # Default timeouts
  timeouts:
    deployment: 600  # 10 minutes
    health_check: 300  # 5 minutes
    rollback: 180  # 3 minutes
  
  # Default retry settings
  retries:
    max_attempts: 3
    backoff_factor: 2
    initial_delay: 5
  
  # Security settings
  security:
    scan_images: true
    check_vulnerabilities: true
    enforce_policies: true
  
  # Notification settings
  notifications:
    on_success: ["slack"]
    on_failure: ["slack", "email", "github"]
    on_warning: ["slack"]