name: Build Workflow

# Reusable workflow for building binaries and container images
on:
  workflow_call:
    inputs:
      go-version:
        description: 'Go version to use'
        required: false
        type: string
        default: '1.21'
      registry:
        description: 'Container registry'
        required: false
        type: string
        default: 'ghcr.io'
      image-name:
        description: 'Container image name'
        required: true
        type: string
      build-binaries:
        description: 'Whether to build binaries'
        required: false
        type: boolean
        default: true
      build-container:
        description: 'Whether to build container image'
        required: false
        type: boolean
        default: true
      platforms:
        description: 'Container platforms to build for'
        required: false
        type: string
        default: 'linux/amd64,linux/arm64'
    outputs:
      image:
        description: 'Built container image with tag'
        value: ${{ jobs.container.outputs.image }}
      digest:
        description: 'Container image digest'
        value: ${{ jobs.container.outputs.digest }}
      binary-artifacts:
        description: 'Binary artifact names'
        value: ${{ jobs.binaries.outputs.artifacts }}

jobs:
  # Build cross-platform binaries
  binaries:
    name: Build Binaries
    runs-on: ubuntu-latest
    if: inputs.build-binaries
    
    outputs:
      artifacts: ${{ steps.artifacts.outputs.names }}
    
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go environment
      uses: ./.github/actions/setup-go
      with:
        go-version: ${{ inputs.go-version }}

    - name: Build binary
      uses: ./.github/actions/build-binary
      with:
        goos: ${{ matrix.goos }}
        goarch: ${{ matrix.goarch }}
        version: ${{ github.ref_name }}
        commit: ${{ github.sha }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: rwwwrse-${{ matrix.goos }}-${{ matrix.goarch }}
        path: dist/
        retention-days: 30

    - name: Set artifact names
      id: artifacts
      run: |
        ARTIFACT_NAME="rwwwrse-${{ matrix.goos }}-${{ matrix.goarch }}"
        echo "names=$ARTIFACT_NAME" >> $GITHUB_OUTPUT

  # Build and push container image
  container:
    name: Build Container Image
    runs-on: ubuntu-latest
    if: inputs.build-container
    
    outputs:
      image: ${{ steps.image.outputs.image }}
      digest: ${{ steps.build.outputs.digest }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.registry }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ inputs.registry }}/${{ inputs.image-name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push container image
      uses: ./.github/actions/build-container
      id: build
      with:
        registry: ${{ inputs.registry }}
        image-name: ${{ inputs.image-name }}
        platforms: ${{ inputs.platforms }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        version: ${{ github.ref_name }}
        commit: ${{ github.sha }}
        push: true

    - name: Output image information
      id: image
      run: |
        IMAGE_TAG="${{ inputs.registry }}/${{ inputs.image-name }}:${{ steps.meta.outputs.version }}"
        echo "image=$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "Built image: $IMAGE_TAG"
        echo "Image digest: ${{ steps.build.outputs.digest }}"

    - name: Build summary
      run: |
        echo "## Build Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Container Image" >> $GITHUB_STEP_SUMMARY
        echo "- **Image**: \`${{ steps.image.outputs.image }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Digest**: \`${{ steps.build.outputs.digest }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Platforms**: ${{ inputs.platforms }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry**: ${{ inputs.registry }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Tags Applied" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
        echo "${{ steps.meta.outputs.tags }}" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  # Build summary job
  build-summary:
    name: Build Summary
    runs-on: ubuntu-latest
    needs: [binaries, container]
    if: always()
    
    steps:
    - name: Generate build summary
      run: |
        echo "## Build Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status | Details |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ inputs.build-binaries }}" == "true" ]]; then
          if [[ "${{ needs.binaries.result }}" == "success" ]]; then
            echo "| Binaries | ✅ Success | Cross-platform binaries built |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Binaries | ❌ Failed | Binary build failed |" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "| Binaries | ⏭️ Skipped | Binary build disabled |" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ inputs.build-container }}" == "true" ]]; then
          if [[ "${{ needs.container.result }}" == "success" ]]; then
            echo "| Container | ✅ Success | ${{ needs.container.outputs.image }} |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Container | ❌ Failed | Container build failed |" >> $GITHUB_STEP_SUMMARY
          fi
        else
          echo "| Container | ⏭️ Skipped | Container build disabled |" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Build Configuration" >> $GITHUB_STEP_SUMMARY
        echo "- **Go Version**: ${{ inputs.go-version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry**: ${{ inputs.registry }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Platforms**: ${{ inputs.platforms }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Ref**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY