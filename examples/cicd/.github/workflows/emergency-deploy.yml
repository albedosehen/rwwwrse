name: Emergency Deployment

# Emergency deployment workflow for hotfixes and critical issues
on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Target environment for emergency deployment'
        required: true
        type: choice
        options:
          - development
          - staging
          - production
          - synology
      image_tag:
        description: 'Container image tag to deploy (required)'
        required: true
        type: string
      reason:
        description: 'Reason for emergency deployment'
        required: true
        type: string
      skip_tests:
        description: 'Skip all tests (emergency only)'
        required: false
        default: false
        type: boolean
      skip_approval:
        description: 'Skip approval gates (critical emergency only)'
        required: false
        default: false
        type: boolean
      notify_team:
        description: 'Send emergency notifications to team'
        required: false
        default: true
        type: boolean

# Global environment variables
env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

# Concurrency control
concurrency:
  group: emergency-deploy-${{ inputs.environment }}-${{ inputs.image_tag }}
  cancel-in-progress: false

permissions:
  contents: read
  packages: read
  deployments: write
  id-token: write
  issues: write

jobs:
  # Emergency validation
  emergency-validation:
    name: Emergency Deployment Validation
    runs-on: ubuntu-latest
    outputs:
      validated: ${{ steps.validate.outputs.validated }}
      deployment-id: ${{ steps.validate.outputs.deployment-id }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Validate emergency deployment
      id: validate
      run: |
        echo "🚨 EMERGENCY DEPLOYMENT INITIATED"
        echo "Environment: ${{ inputs.environment }}"
        echo "Image Tag: ${{ inputs.image_tag }}"
        echo "Reason: ${{ inputs.reason }}"
        echo "Triggered by: ${{ github.actor }}"
        echo "Timestamp: $(date -u +%Y-%m-%dT%H:%M:%SZ)"
        
        # Validate image exists
        IMAGE="${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ inputs.image_tag }}"
        echo "Validating emergency image: $IMAGE"
        
        if docker manifest inspect "$IMAGE" >/dev/null 2>&1; then
          echo "✅ Emergency image exists and is accessible"
          echo "validated=true" >> $GITHUB_OUTPUT
        else
          echo "❌ Emergency image not found: $IMAGE"
          echo "validated=false" >> $GITHUB_OUTPUT
          exit 1
        fi
        
        # Generate deployment ID
        DEPLOYMENT_ID="emergency-$(date +%s)-${{ github.run_number }}"
        echo "deployment-id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT

    - name: Create emergency deployment issue
      uses: actions/github-script@v7
      with:
        script: |
          const title = `🚨 Emergency Deployment: ${{ inputs.environment }} - ${{ inputs.image_tag }}`;
          const body = `## Emergency Deployment Alert
          
          **Environment:** ${{ inputs.environment }}
          **Image Tag:** ${{ inputs.image_tag }}
          **Reason:** ${{ inputs.reason }}
          **Triggered by:** ${{ github.actor }}
          **Timestamp:** ${new Date().toISOString()}
          **Workflow Run:** ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          
          ### Emergency Parameters
          - Skip Tests: ${{ inputs.skip_tests }}
          - Skip Approval: ${{ inputs.skip_approval }}
          - Notify Team: ${{ inputs.notify_team }}
          
          ### Actions Required
          - [ ] Monitor deployment progress
          - [ ] Verify application functionality
          - [ ] Document any issues encountered
          - [ ] Plan follow-up actions if needed
          
          This issue was automatically created for emergency deployment tracking.`;

          const issue = await github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: title,
            body: body,
            labels: ['emergency-deployment', 'urgent', `env:${{ inputs.environment }}`]
          });
          
          console.log(`Created emergency tracking issue #${issue.data.number}`);

  # Emergency approval (can be skipped)
  emergency-approval:
    name: Emergency Approval
    runs-on: ubuntu-latest
    needs: emergency-validation
    if: inputs.skip_approval == false && (inputs.environment == 'production' || inputs.environment == 'staging')
    environment:
      name: ${{ inputs.environment }}-emergency-approval

    steps:
    - name: Emergency approval required
      run: |
        echo "🚨 Emergency deployment to ${{ inputs.environment }} requires approval"
        echo "Reason: ${{ inputs.reason }}"
        echo "Image: ${{ inputs.image_tag }}"
        echo "Requested by: ${{ github.actor }}"

  # Emergency deployment
  emergency-deploy:
    name: Emergency Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    needs: [emergency-validation, emergency-approval]
    if: always() && needs.emergency-validation.outputs.validated == 'true' && (needs.emergency-approval.result == 'success' || needs.emergency-approval.result == 'skipped')
    environment:
      name: ${{ inputs.environment }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Emergency deployment to ${{ inputs.environment }}
      run: |
        echo "🚨 EXECUTING EMERGENCY DEPLOYMENT"
        echo "Environment: ${{ inputs.environment }}"
        echo "Image: ${{ inputs.image_tag }}"
        echo "Deployment ID: ${{ needs.emergency-validation.outputs.deployment-id }}"
        
        # In a real implementation, this would call the appropriate deployment action
        # For now, we'll simulate the deployment process
        
        if [ "${{ inputs.environment }}" = "synology" ]; then
          echo "Deploying to Synology NAS..."
          # Would call Synology deployment action
        else
          echo "Deploying to Kubernetes environment..."
          # Would call Kubernetes deployment action
        fi
        
        echo "✅ Emergency deployment completed"

    - name: Emergency health check
      if: inputs.skip_tests == false
      run: |
        echo "Running emergency health checks..."
        
        # Determine health check URL based on environment
        case "${{ inputs.environment }}" in
          "development")
            HEALTH_URL="https://dev.rwwwrse.example.com/health"
            ;;
          "staging")
            HEALTH_URL="https://staging.rwwwrse.example.com/health"
            ;;
          "production")
            HEALTH_URL="https://rwwwrse.example.com/health"
            ;;
          "synology")
            HEALTH_URL="http://localhost:8080/health"
            ;;
        esac
        
        echo "Health check URL: $HEALTH_URL"
        
        # Perform health check with retries
        for i in {1..10}; do
          if curl -f --max-time 10 "$HEALTH_URL" >/dev/null 2>&1; then
            echo "✅ Emergency deployment health check passed (attempt $i)"
            break
          else
            echo "⚠️ Health check failed (attempt $i/10), retrying in 30s..."
            if [ $i -eq 10 ]; then
              echo "❌ Emergency deployment health check failed after 10 attempts"
              exit 1
            fi
            sleep 30
          fi
        done

  # Emergency notification
  emergency-notify:
    name: Emergency Notification
    runs-on: ubuntu-latest
    needs: [emergency-validation, emergency-deploy]
    if: always() && inputs.notify_team == true

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Determine notification status
      id: status
      run: |
        if [ "${{ needs.emergency-deploy.result }}" = "success" ]; then
          echo "status=success" >> $GITHUB_OUTPUT
          echo "message=Emergency deployment completed successfully" >> $GITHUB_OUTPUT
        else
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "message=Emergency deployment failed" >> $GITHUB_OUTPUT
        fi

    - name: Send emergency notification
      uses: ./.github/actions/notify-slack
      with:
        status: ${{ steps.status.outputs.status }}
        environment: ${{ inputs.environment }}
        image-tag: ${{ inputs.image_tag }}
        message: |
          🚨 **EMERGENCY DEPLOYMENT ALERT**
          
          **Status**: ${{ steps.status.outputs.message }}
          **Environment**: ${{ inputs.environment }}
          **Image**: ${{ inputs.image_tag }}
          **Reason**: ${{ inputs.reason }}
          **Triggered by**: ${{ github.actor }}
          **Deployment ID**: ${{ needs.emergency-validation.outputs.deployment-id }}
        webhook-url: ${{ secrets.SLACK_WEBHOOK_URL }}
      continue-on-error: true

    - name: Create deployment summary
      run: |
        echo "## 🚨 Emergency Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Setting | Value |" >> $GITHUB_STEP_SUMMARY
        echo "|---------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| Environment | ${{ inputs.environment }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Image Tag | ${{ inputs.image_tag }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Reason | ${{ inputs.reason }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Triggered by | ${{ github.actor }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Deployment ID | ${{ needs.emergency-validation.outputs.deployment-id }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Skip Tests | ${{ inputs.skip_tests }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Skip Approval | ${{ inputs.skip_approval }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Status | ${{ needs.emergency-deploy.result == 'success' && '✅ Success' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.emergency-deploy.result }}" = "success" ]; then
          echo "### ✅ Emergency Deployment Successful" >> $GITHUB_STEP_SUMMARY
          echo "The emergency deployment has been completed successfully." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Next Steps:**" >> $GITHUB_STEP_SUMMARY
          echo "- Monitor application performance" >> $GITHUB_STEP_SUMMARY
          echo "- Verify all functionality is working" >> $GITHUB_STEP_SUMMARY
          echo "- Document any issues or observations" >> $GITHUB_STEP_SUMMARY
          echo "- Plan follow-up regular deployment if needed" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ❌ Emergency Deployment Failed" >> $GITHUB_STEP_SUMMARY
          echo "The emergency deployment encountered errors." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Immediate Actions Required:**" >> $GITHUB_STEP_SUMMARY
          echo "- Check deployment logs for error details" >> $GITHUB_STEP_SUMMARY
          echo "- Verify infrastructure status" >> $GITHUB_STEP_SUMMARY
          echo "- Consider rollback if necessary" >> $GITHUB_STEP_SUMMARY
          echo "- Escalate to on-call team if critical" >> $GITHUB_STEP_SUMMARY
        fi